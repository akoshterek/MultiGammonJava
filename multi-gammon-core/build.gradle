plugins {
    id 'application'
}

application {
    mainClass = 'backgammon.MultiGammon'
}

dependencies {
    implementation "com.michaelpollmeier:scala-arm_2.13:${scalaArmVersion}"
    implementation "commons-cli:commons-cli:${commonsCliVersion}"
    implementation "commons-io:commons-io:${commonsIoVersion}"
    implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
    implementation "org.apache.commons:commons-math3:${commonsMathVersion}"
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "org.encog:encog-core:${encogVersion}"

    // Add Scala logging dependencies
    implementation "com.typesafe.scala-logging:scala-logging_2.13:3.9.5"
    implementation "ch.qos.logback:logback-classic:1.2.13"
}

// Create the fat JAR task here
task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'backgammon.MultiGammon'
    }

    archiveBaseName = 'multi-gammon'
    archiveClassifier = 'all'

    // Include all runtime dependencies
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // Include compiled classes from this project
    from sourceSets.main.output

    // Include resources
    from(sourceSets.main.resources) {
        include '**/*'
    }

    // Include the multi-gammon-util project output
    from project(':multi-gammon-util').sourceSets.main.output

    // Exclude signature files from dependencies
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'

    with jar
}

task runMultiGammon(type: JavaExec) {
    group = 'application'
    description = 'Run MultiGammon with command-line arguments.'

    classpath = sourceSets.main.runtimeClasspath
    main = 'org.akoshterek.backgammon.MultiGammon'

    // Example arguments â€“ change or override at runtime with --args=""
    args = ['--config', 'config.yml']
}